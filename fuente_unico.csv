<<<<<<< HEAD
aparear_archivos,"(nombres_archivos_csv_individuales)",Crear_Diccionario_Datos.py,"lineas_archivos_csv = []","for nombre_archivo_csv_individual in nombres_archivos_csv_individuales:","with open(nombre_archivo_csv_individual, 'r') as archivo_individual:","linea_csv = archivo_individual.readline()","while linea_csv:","lineas_archivos_csv.append(linea_csv)","linea_csv = archivo_individual.readline()","lineas_ordenadas_archivos_csv = sorted(lineas_archivos_csv)","with open(f'{'fuente_unico.csv' if 'fuente' in nombres_archivos_csv_individuales[0] else 'comentarios.csv'}', 'w') as archivo_final:","for linea in lineas_ordenadas_archivos_csv:","archivo_final.write(linea)","def obtener_ubicaciones_archivos_csv_individuales(nombres_archivos_csv_individuales):"
borrar_archivos_csv_individuales,"(nombres_archivos_csv_individuales)",Crear_Diccionario_Datos.py,"ubicaciones_archivos_csv_individuales = obtener_ubicaciones_archivos_csv_individuales(nombres_archivos_csv_individuales)","for ubicacion_archivo_csv_individual in ubicaciones_archivos_csv_individuales:","os.remove(ubicacion_archivo_csv_individual)","def main():"
crear_archivos_csv_individuales,"(datos_programas, nombres_modulos)",Crear_Diccionario_Datos.py,"nombres_funciones_ordenadas = sorted(list(datos_programas.keys()))","for nombre_modulo in nombres_modulos:","with open(f'fuente_{nombre_modulo}.csv', 'w') as archivo_fuente, open(f'comentarios_{nombre_modulo}.csv', 'w') as archivo_comentarios:","for nombre_funcion in nombres_funciones_ordenadas:","if nombre_modulo == datos_programas[nombre_funcion]['modulo']:","grabar_fuente_individual(archivo_fuente, nombre_funcion, datos_programas[nombre_funcion]['parametros'], nombre_modulo, datos_programas[nombre_funcion]['lineas'])","grabar_comentarios_individual(archivo_comentarios, nombre_funcion, datos_programas[nombre_funcion]['comentarios'])","def aparear_archivos(nombres_archivos_csv_individuales):"
grabar_comentarios_individual,"(archivo_comentarios, nombre_funcion, comentarios)",Crear_Diccionario_Datos.py,"nombre_autor = comentarios['autor']","ayuda = comentarios['ayuda']","otros_comentarios = comentarios['otros comentarios']","archivo_comentarios.write(f'{nombre_funcion},{nombre_autor},{ayuda},{','.join(comentario for comentario in otros_comentarios) if otros_comentarios is not None else None}\n')","def obtener_nombres_archivos_csv_individuales(nombres_modulos):"
grabar_fuente_individual,"(archivo_fuente, nombre_funcion, parametros_funcion, nombre_modulo, lineas_codigo)",Crear_Diccionario_Datos.py,"archivo_fuente.write(f'{nombre_funcion},'{parametros_funcion}',{nombre_modulo},{','.join(linea_codigo for linea_codigo in lineas_codigo)}\n')","def grabar_comentarios_individual(archivo_comentarios, nombre_funcion, comentarios):"
leer_lineas_codigo,"(codigo, datos_actuales, nombre_modulo, imports)",Crear_Diccionario_Datos.py,"linea_codigo = codigo.readline()","while linea_codigo:","if linea_codigo.startswith('def'):","nombre_funcion, parametros = separar_linea_funcion(linea_codigo)","datos_actuales[nombre_funcion] = {'modulo': nombre_modulo,","'parametros': parametros,","'lineas': [],","'comentarios': {'autor': None,","'ayuda': None,","'otros comentarios': None","}","}","if linea_codigo.startswith('import'):","if nombre_modulo not in imports:","imports[nombre_modulo] = []","imports[nombre_modulo].append(linea_codigo)","if linea_codigo.startswith('    '):","if (''''' in linea_codigo):","if 'Ayuda' in linea_codigo:","datos_actuales[nombre_funcion]['comentarios']['ayuda'] = f''{linea_codigo.strip()}''","elif 'Autor' in linea_codigo:","datos_actuales[nombre_funcion]['comentarios']['autor'] = f''{linea_codigo.strip()}''","if datos_actuales[nombre_funcion]['comentarios']['otros comentarios'] == None:","datos_actuales[nombre_funcion]['comentarios']['otros comentarios'] = []","datos_actuales[nombre_funcion]['comentarios']['otros comentarios'].append(f''{linea_codigo.strip()}'')","else:","datos_actuales[nombre_funcion]['lineas'].append(f''{linea_codigo.strip()}'')","linea_codigo = codigo.readline()","return datos_actuales, imports"
main,"()",Crear_Diccionario_Datos.py,"archivo_principal = 'programas.txt'","datos_modulos, nombres_modulos = obtener_datos_programas(archivo_principal)","nombres_archivos_fuente, nombres_archivos_comentarios = obtener_nombres_archivos_csv_individuales(nombres_modulos)","nombres_archivos_csv_individuales = nombres_archivos_fuente + nombres_archivos_comentarios","crear_archivos_csv_individuales(datos_modulos, nombres_modulos)","aparear_archivos(nombres_archivos_fuente)","aparear_archivos(nombres_archivos_comentarios)","borrar_archivos_csv_individuales(nombres_archivos_csv_individuales)","main()"
obtener_datos_programas,"(archivo_principal)",Crear_Diccionario_Datos.py,"ubicaciones_modulos = obtener_ubicaciones_modulos(archivo_principal)","datos_modulos = {}","imports = {}","nombres_modulos = []","for ubicacion_modulo in ubicaciones_modulos:","nombre_modulo = ubicacion_modulo.split('\\')[-1]","if nombre_modulo not in nombres_modulos:","nombres_modulos.append(nombre_modulo)","with open(ubicacion_modulo, 'r') as codigo:","leer_lineas_codigo(codigo, datos_modulos, nombre_modulo, imports)","return datos_modulos, nombres_modulos"
obtener_nombres_archivos_csv_individuales,"(nombres_modulos)",Crear_Diccionario_Datos.py,"nombres_archivos_fuente_individuales = [f'fuente_{nombre_modulo}.csv' for nombre_modulo in nombres_modulos]","nombres_archivos_comentarios_individuales = [f'comentarios_{nombre_modulo}.csv' for nombre_modulo in nombres_modulos]","return nombres_archivos_fuente_individuales, nombres_archivos_comentarios_individuales"
obtener_ubicaciones_archivos_csv_individuales,"(nombres_archivos_csv_individuales)",Crear_Diccionario_Datos.py,"return [os.path.abspath(nombre_archivo_csv_individual) for nombre_archivo_csv_individual in nombres_archivos_csv_individuales]"
obtener_ubicaciones_modulos,"(archivo_principal)",Crear_Diccionario_Datos.py,"with open(archivo_principal, 'r') as archivo:","ubicaciones = archivo.read().splitlines()","return ubicaciones"
separar_linea_funcion,"(linea_codigo)",Crear_Diccionario_Datos.py,"bandera = False","nombre_funcion = ''","parametros = ''","for caracter in linea_codigo[3:-2]:","if caracter == '(':","bandera = True","if not caracter.isspace():","if bandera:","parametros += caracter","else:","nombre_funcion += caracter","if caracter == ')':","bandera = False","return nombre_funcion, parametros"
=======
"es_primo","(valor)","lib_matematica.py","devolver = True","if valor <= 1:","devolver = False","else:","divisor = 2","while (((valor % divisor)!=0) and (divisor <= valor/2)):","divisor += 1","if divisor <= valor/2:","devolver = False","return devolver"
"factorial","(n)","lib_matematica.py","resultado = 1","for i in range(2, n+1):","resultado = resultado * i","return resultado"
"mcd","(nro_1, nro_2)","lib_matematica.py","if abs(nro_1) < abs(nro_2):","menor = abs(nro_1)","mayor = abs(nro_2)","else:","menor = abs(nro_2)","mayor = abs(nro_1)","devovler = -1","elif menor == 0:","devolver = mayor","dividendo = mayor","divisor = menor","resto = mayor % divisor","while resto != 0:","dividendo = divisor","divisor = resto","resto = dividendo % divisor","devolver = divisor","return devolver"
"mcm","(nro_1, nro_2)","lib_matematica.py","return (nro_1 * nro_2)//mcd(nro_1, nro_2)"
"menu_MCD","()","app_matematica.py","print('\nMCD (Maximo comun divisor)')","valor_1 = solicitar_valor('Numero 1: ', -100000, 100000 )","valor_2 = solicitar_valor('Numero 2: ', -100000, 100000 )","print('El MCD es: ', lib_matematica.mcd(valor_1, valor_2), '\n')","def menu_MCM():"
"menu_MCM","()","app_matematica.py","print('\nMCM (Minimo comun multiplo)')","valor_1 = solicitar_valor('Numero 1: ', -100000, 100000 )","valor_2 = solicitar_valor('Numero 2: ', -100000, 100000 )","print('El MCM es: ', lib_matematica.mcm(valor_1, valor_2), '\n')","def menu_opciones():"
"menu_elegir","()","app_matematica.py","menu_opciones()","opcion = solicitar_valor('Opcion: ', 1, 6)","print('-------------------------------')","while opcion != 6:","if opcion == 1:","menu_factorial()","elif opcion == 2:","menu_potencia()","elif opcion == 3:","menu_primo()","elif opcion == 4:","menu_MCD()","else:","menu_MCM()","menu_opciones()","opcion = solicitar_valor('Opcion: ', 1, 6)","print('-------------------------------')","menu_elegir()"
"menu_factorial","()","app_matematica.py","print('\nCalculo de Factorial')","valor = solicitar_valor('Numero: ', 0, 20)","print('El factorial es: ', lib_matematica.factorial(valor), '\n')","def menu_potencia():"
"menu_opciones","()","app_matematica.py","print('-------------------------------')","print('MENU DE OPERACIONES MATEMATICAS')","print()","print('1. Factorial')","print('2. Potencia')","print('3. Primo')","print('4. MCD (Maximo Comun Divisor)')","print('5. MCM (Minimo Comun Multiplo)')","print('6. Terminar')","print()","def menu_elegir():"
"menu_potencia","()","app_matematica.py","print('\nCalculo de Potencia')","base = solicitar_valor('Base: ', -100, 100)","exponente = solicitar_valor('Exponente: ', -100, 100)","print('La potencia es: ', lib_matematica.potencia(base, exponente), '\n')","def menu_primo():"
"menu_primo","()","app_matematica.py","print('\nEvaluar Primo')","valor = solicitar_valor('Numero: ', -100000, 100000)","print('Es Primo\n' if lib_matematica.es_primo(valor) else 'No es primo\n')","def menu_MCD():"
"potencia","(base, exponente)","lib_matematica.py","resultado = base","for i in range(2, abs(exponente) +1):","resultado *= base","if exponente == 0:","resultado = 1","elif exponente < 0:","resultado = 1 / resultado","return resultado"
"solicitar_valor","(mensaje, minimo, maximo)","app_matematica.py","valor = input(mensaje)","while (not valor.isdigit()) or ((int(valor) < minimo) or (int(valor) > maximo)):","print('Error: Valor debe estar entre', minimo, 'y', maximo)","valor = input(mensaje)","return int(valor)"
>>>>>>> 26edf767dc04c2873662ae158d735ece3fdf38c5
